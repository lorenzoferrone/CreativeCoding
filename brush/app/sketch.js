// Generated by CoffeeScript 1.10.0
var Dot, Grid, Path, cols, draw, g, mousePressed, paths, ref, rows, selectedDots, setup, w;

ref = require('./app/grid'), Grid = ref.Grid, Dot = ref.Dot;

Path = require('./app/path').Path;

w = 40;

cols = rows = null;

g = null;

paths = [new Path()];

console.log(paths);

selectedDots = [];

setup = function() {
  createCanvas(windowWidth, windowHeight);
  g = new Grid();
  g.draw();
};

draw = function() {
  var d, i, len, p, results;
  background(51);
  g.draw();
  d = g.near(mouseX, mouseY);
  d.highlight();
  results = [];
  for (i = 0, len = paths.length; i < len; i++) {
    p = paths[i];
    results.push(p.draw());
  }
  return results;
};

mousePressed = function() {
  var d, i, index, len, p, point, results;
  if (mouseButton === LEFT) {
    d = g.near(mouseX, mouseY);
    d.selected = !d.selected;
    p = paths[paths.length - 1];
    p.path.push([d.x, d.y]);
    if (keyIsPressed && keyCode === 18) {
      results = [];
      for (i = 0, len = paths.length; i < len; i++) {
        p = paths[i];
        results.push((function() {
          var j, len1, ref1, results1;
          ref1 = p.path;
          results1 = [];
          for (index = j = 0, len1 = ref1.length; j < len1; index = ++j) {
            point = ref1[index];
            if ((point[0] === d.x) && (point[1] === d.y)) {
              results1.push(p.path.splice(index, 1));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        })());
      }
      return results;
    }
  } else {
    d = g.near(mouseX, mouseY);
    d.selected = !d.selected;
    p = new Path();
    paths.push(p);
    return p.path.push([d.x, d.y]);
  }
};
