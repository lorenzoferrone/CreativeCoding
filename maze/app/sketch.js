// Generated by CoffeeScript 1.10.0
var Cell, cols, current, draw, grid, index, removeWalls, round_, rows, setup, stack, w;

cols = 0;

rows = 0;

w = 40;

grid = [];

stack = [];

current = null;

round_ = function(x, n) {
  var a;
  a = floor(x / n) * n;
  return a;
};

setup = function() {
  var cell, i, j, k, l, ref, ref1;
  createCanvas(round_(windowWidth - 10, w), round_(windowHeight - 10, w));
  cols = floor(width / w);
  rows = floor(height / w);
  for (j = k = 0, ref = rows; 0 <= ref ? k < ref : k > ref; j = 0 <= ref ? ++k : --k) {
    for (i = l = 0, ref1 = cols; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
      cell = new Cell(i, j);
      grid.push(cell);
    }
  }
  return current = grid[0];
};

draw = function() {
  var cell, k, len, n;
  background(51);
  for (k = 0, len = grid.length; k < len; k++) {
    cell = grid[k];
    cell.show();
  }
  current.visited = true;
  current.highlight();
  n = current.checkNeighbors();
  if (n !== void 0) {
    n.visited = true;
    stack.push(current);
    removeWalls(current, n);
    return current = n;
  } else if (stack !== []) {
    return current = stack.pop();
  }
};

index = function(i, j) {
  if (i < 0 || j < 0 || i > cols - 1 || j > rows - 1) {
    return -1;
  }
  return i + j * cols;
};

Cell = (function() {
  function Cell(i1, j1) {
    this.i = i1;
    this.j = j1;
    this.walls = [true, true, true, true];
    this.visited = false;
  }

  Cell.prototype.checkNeighbors = function() {
    var bottom, k, left, len, n, neighbors, r, ref, right, top;
    neighbors = [];
    top = grid[index(this.i, this.j - 1)];
    right = grid[index(this.i + 1, this.j)];
    bottom = grid[index(this.i, this.j + 1)];
    left = grid[index(this.i - 1, this.j)];
    ref = [top, right, bottom, left];
    for (k = 0, len = ref.length; k < len; k++) {
      n = ref[k];
      if (n && !n.visited) {
        neighbors.push(n);
      }
    }
    if (neighbors) {
      r = floor(random(0, neighbors.length));
      return neighbors[r];
    } else {
      return void 0;
    }
  };

  Cell.prototype.show = function() {
    var x, y;
    x = this.i * w;
    y = this.j * w;
    stroke(255);
    if (this.walls[0]) {
      line(x, y, x + w, y);
    }
    if (this.walls[1]) {
      line(x + w, y, x + w, y + w);
    }
    if (this.walls[2]) {
      line(x + w, y + w, x, y + w);
    }
    if (this.walls[3]) {
      line(x, y + w, x, y);
    }
    if (this.visited) {
      noStroke();
      fill(255, 0, 255, 20);
      return rect(x, y, w, w);
    }
  };

  Cell.prototype.highlight = function() {
    var x, y;
    x = this.i * w;
    y = this.j * w;
    noStroke();
    fill(0, 0, 255, 100);
    return rect(x, y, w, w);
  };

  return Cell;

})();

removeWalls = function(a, b) {
  var x, y;
  x = a.i - b.i;
  y = a.j - b.j;
  if (x === 1) {
    a.walls[3] = false;
    b.walls[1] = false;
  }
  if (x === -1) {
    a.walls[1] = false;
    b.walls[3] = false;
  }
  if (y === 1) {
    a.walls[0] = false;
    b.walls[2] = false;
  }
  if (y === -1) {
    a.walls[2] = false;
    return b.walls[0] = false;
  }
};
